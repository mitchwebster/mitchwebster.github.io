var mitchApp=angular.module("mitchApp",["ui.router","ngAnimate","ui.bootstrap"]);mitchApp.config(["$stateProvider","$urlRouterProvider",function(e,t){t.otherwise("/home"),e.state("home",{url:"/home",templateUrl:"views/front_page.html"}).state("projects",{url:"/projects",templateUrl:"views/projects.html",controller:"proCtrl"}).state("projectDetail",{url:"/projects/{projectID:[0-9]}",templateUrl:"views/project_detail.html",controller:"projectDetCtrl"}).state("about",{url:"/about",templateUrl:"views/about.html",controller:"aboutCtrl"})}]),function(){angular.module("mitchApp").factory("projectFactory",[function(){function e(){return n}function t(e){return n[e]}function o(){return n.length-1}function a(){return i}var i={id:-1,title:"",type:"",desc:"",icons:[""],img:[""],links:[],date:new Date,content:{otext:"",feats:[],analysis:[],improve:[]}},n=[{id:0,title:"Shopping With Friends",type:"Android Application",desc:"A mobile application focused on connecting user and providing them with the tools to buy/sell goods through a social network.",icons:["android","shopping-cart"],img:["img/android.jpg","img/swf.png","img/swf_drawer.png","img/swf_friends.png","img/swf_map.png","img/swf_register.png"],links:[{title:"Github",link:"https://github.com/mitchwebster/ShopWithFriends-master"}],date:new Date("March 1, 2015"),content:{otext:"This group project focused on developing an Android application that used SOLID design principles to create a decoupled, highly cohesive product. The function of the product was to create an environment for people to register, buy and sell items within the local area.",feats:["Used MongoLab MongoDB database for storing collections of items and users","Wrote thick client-side api for interacting with efficiently with thin server and database.","Leveraged 3rd party libraries including Google Maps and Send Grid for additional functionality."],analysis:[{title:"Models",text:"While working with this application, we used various models to handle all the different data. We created models for users, products, and tags. The user model contained login information, their status (particularly admin or standard user), and the products they were interested in buying or selling. For each product, we had simple creation fields (who created it and when), the name, description , and minimum sales price. We also geo-stamped each product to allow users to see the products near them. We also provided the user with the ability to add tags (which we implemented as an enumeration) to each product for more efficient search when looking for a product. We also provided a means for keeping track of and notifying interested parties when products had potential bids."},{title:"User Interface",text:"The user interface was primarily composed of various pages where you could enter information. To get to each page, you had to use the Android Navigation Drawer that you could pull out with a sideswipe. This interface allowed for organized content and quick page loading. Moreover, we also included a Google Maps page that allowed a potential buyer to view all of the products for sale around them. They could also see all of there products and if they had any potential bids."}],improve:[{title:"Improvements",text:"Since this application was for a project, I mainly stuck to the requirements presented by the instructor. Because of this, some of the features of the app, are not fully implimented and need to be further developed. Given this, there are several changes I would make to the existing application. The first improvement I would make would be to use a REST API for interacting with the database. Currently, the API that I wrote is similar to REST, however it lacks much of the security that a full REST API would have. Furthermore, the thick client causes more battery loss than using a thin client and a more powerful server. Finally, I would want to provide more security of the data itself. Since this was a concept application, I did not take the time to hash passwords in the database, but rather stored them in plain-text. Something that should never be done in production. Moreover, I would like to implement a token authentication system as it makes more sense that a standard username-password model for this application."},{title:"Lessons Learned",text:"This project taught me a lot about design principles and Android development. I had used Java and Android before in previous classes and my internship with NCR, but I did get to enhance my knowledge of the framework by using page fragments, navigation drawers, custom Map items, and custom HTTP calls by practicing while building this concept application. Moreover, by taking the design course at the same time as this, I was able to apply SOLID principles to the application I was building while learning them in lecture. I also learned a lot about environment building programs such as Gradle and unit testing within Android (something I had only previously done in Java)."}]}},{id:1,title:"Missile Command",type:"Hardware/Low-Level Software",desc:"A classic arcade game implemented in C/C++ and pushed onto an mbed microprocessor connected to custom hardware.",icons:["gamepad","plug"],img:["img/mc_setup.jpg","img/mc_game.jpg"],links:[],date:new Date("November 1, 2014"),content:{otext:"This is a project that focused on creating the classic arcade game 'Missile Command' on a mbed microcontroller connected to an LCD Display, some pushbuttons,  a buzzer, and an accelerometer.",feats:["Fully implemented game written in C/C++","Add features for speeding up player, custom ships and lives, and dynamically changing rules for missile interception.","Used SD card .wav files and pwm to add sound effects"],analysis:[{title:"General Architecture",text:"To begin with, when making this game I was provided with some structs for missile's, cities, and the player. I took these and enhanced them, allowing these simple data containers to act more like objects with methods, which made interacting between elements much simpler. I also found that the provided implementation used far to many unnecessary conditionals, so I abstracted some logic (such as collision detection) away from the main program and into individual elements. This allowed the main program to focus primarily on score, life, and game over tracking, while individual elements had their own behavior. I also used objects to model the pushbuttons, LCD screen, and buzzer."},{title:"Game Flow",text:"The game started off with a menu screen which prompted the user for the game difficulty. Then user then entered a world where missiles rain from the sky while the user has to use pushbuttons to aim and fire at the incoming missiles. If all the cities (the missile targets) explode or the player is hit with a missile, the game is over and the user is sent, if applicable, to a high score page. Here they can enter their initials or restart the game for more action."}],improve:[{title:"Improvements",text:"The primary improvement that I would have made to this project would be to make it multithreaded. In it's current state, each object is able to handle particular events, however everything runs on one thread, which makes the performance suffer. In the future, I would like to make the UI thread seperate from the main logic to ensure a more fluid gaming experience."},{title:"Lessons Learned",text:"Through working on this project, I learned a lot about abstraction by working with different objects and deciding which attributes the main game controller should have access to and which should be internal or private. Moreover, I also learned a lot about how frustrating complex breadboard circuits can be if the wires aren't meticulously placed. I had wires going everywhere and it made debugging and even presenting this project an absolute nightmare."}]}},{id:2,title:"Prox-1 FST",type:"Software",desc:"Developer on the Flight Software Team for the Prox-1 Research Mission. Focused on communication protocol with the satellite.",icons:["rocket","rss"],img:[],links:[{title:"Georgia Tech",link:"http://www.ssdl.gatech.edu/projects.shtml"},{title:"YouTube Concept Video",link:"https://youtu.be/eGa2ROpUKE8"}],date:new Date("May 1, 2015"),content:{otext:"This is a project that I worked on for Georgia Tech through the Undergraduate research program. I wrote software for securely communicating with a satellite called Prox-1.",feats:["Researched communication mediums including TCP/IP and UDP","Wrote functions for decoding and encoding information between ground and satellite","Worked on architecture for commands and data retrieval in a high packet loss environment","Built security measures for satellite uplink"],analysis:[{title:"More Later",text:"This is project is still in progress, I will post more details after the mission is complete."}],improve:[{title:"Improvements",text:"This project is still in progress."},{title:"Lessons Learned",text:"This project is still in progress."}]}},{id:3,title:"Robotic Navigation",type:"Hardware/Low-Level Software",desc:"A project written in VHDL and a custom assembly language to guide an FPGA controlled robot.",icons:["arrows","plug"],img:["img/de2bot.jpg"],links:[{title:"See Our Presentation",link:"https://drive.google.com/file/d/0B85bZVNGsipIT24xckVtTjNlVVk/view?usp=sharing"}],date:new Date("March 1, 2015"),content:{otext:"This was a group project that focused on designing an arctangent implementation for a custom processor and to display its application, accuracy, and calculationspeed through navigation applications.",feats:["VHDL and Assembly programming for custom FPGA processor","Used Lookup Table w/ interpolation between entries to map the arctangent function within 1 degree of error.","Wrote methods to move to relative positions and return home on a button press"],analysis:[{title:"Implementing Arctangent",text:"The most important part of this project was to implement the arctangent function using Assembly. We began by researching how most processors make this calculation. Some used a lookup table (LUT), some used a taylor series approximation, and others used a LUT with interpolation. We choose the third option as it provided a nice balance between memory and processing requirement. After we decided on the approach, we were able perform the arctangent function on input values between 0 and 45 degrees. Using this partial result, we were able to use the odd property and the reflective properties of the arctangent function to accurately calculate the arctangent of any given input."},{title:"Using Arctangent to Direct Movement",text:"After we had successfully implemented the Arctangent function, we wanted to use it for more efficient movement. Rather than moving in one direction and then another to get to a target location, we were able to take the ratio between two inputs (X and Y), use the Arctangent function to calculate the angle to turn to. Then we used a square root function to move to the corresponding relative position. This allowed our robot to efficiently move to any target location directly, a significant ability for robotic navigation."}],improve:[{title:"Improvements",text:"After reviewing our design, there were several things we would have liked to change. To begin with, our mapping of arctangent between 0 and 45 to all other degrees took up more memory than the actual implementation. This was certainly something that we could improve on, perhaps by using partial results within the mapping function. Also, we didn't factor in momentum when turning to a given angle, this was something that we would certainly improve in the future."},{title:"Lessons Learned",text:"Through this project I learned a lot about software systems and efficient programming. Since we had to implement our solution on a custom processor, we had to design multipliers and dividers in VHDL and then focus on how we would pass arguments to these devices. This interaction between assembly and VHDL (software describing hardware) was something that I had never been exposed to. I also got to continue working on my knowledge of efficiently programming. Especially when optimizing the process of calculating arctangent, I had to use dynamic programming and precomputed values to minimize the number of lines."}]}},{id:4,title:"Pattern Recognition",type:"Low-Level Software",desc:"This project leveraged both C and MIPS Assembly language to recognize a particular color pattern from a group of candidate patterns.",icons:["bar-chart","puzzle-piece"],img:["img/pattern_matcher.png"],links:[{title:"Github",link:"https://github.com/mitchwebster/pattern-recognition"}],date:new Date("October 1, 2014"),content:{otext:"This project used C and MIPS Assembly to take a 3x3 grids of colors (the candidates), which may be flipped, rotated, or both,  and matched it to a desired target pattern.",feats:["Wrote C and MIPS implementations of algorithm that leverages bit shifting to solve this problem","Highly efficient MIPS assembly code, used patterns in individual bit shifts to improve efficiency","Used GDB debugger to find errors in C"],analysis:[{title:"C Implementation",text:"To begin with, I started by modeling the grid itself. Each cell had up to 4 possible colors, and with 9 total cells per candidate grid, I choose to model each grid as the first 18 bits of an integer in C. I then made an array containing all of the candidates in this format, and began trying out solutions. I eventually came to bit shifting after numerous failed attempts as the matching patterns had similar bit patterns. I eventually found that from the target pattern, I couldreproduce all of the possible flipped and rotated patterns by shifting groups of bits in different ways. After this revolution, I simply reversed the algorithm and tested it on every candidate until I found a match."},{title:"MIPS Implementation",text:"After designing and testing the solution in C, I began to try it in MIPS Assembly. This was a pretty difficult task, especially since bit shifting and masking in C is much simpler than the Assembly version. However after rewriting my algorithm, I still failed the provided benchmarks due to a lack of efficiency. After several days of refactoring I began to see a pattern between the rotation schemes and was able to use partial results, similar to dynamic programming, to improve the efficiency by nearly half."}],improve:[{title:"Improvements",text:"The largest improvement that I could make to this project would be to implement my algorithm changes in C. Since I wrote the Assembly portion after the C portion, I never went back to improve the efficiency of that code. This could greatly improve the efficiency of the code."},{title:"Lessons Learned",text:"Through this project I learned a lot about changing one's perspective. Originally I kept approaching the problem as a human would do, testing the corner color, looking at diagonals,  looking at the center block, etc. However when I looked at how the computer was actually representing and handling these grids, I was able to develop and efficient algorithm."}]}},{id:5,title:"NFC Desktop Check-In",type:"JavaFX Application & Arduino",desc:"A project focused on quick registration by leveraging Near Field Communication (NFC) and Arduino Serial Communicaiton.",icons:["user","database"],img:["img/nfcPrograms.jpg","img/nfc2.jpg"],links:[],date:new Date("December 1, 2014"),content:{otext:"This project focused on using near field communication (nfc), a JavaFX application, and serial communication to register entries by scanning NFC tags and transmitting identification numbers.",feats:["Uses NFC Arduino Reader to scan pre-printed NFC tags","Applies SceneBuilder to create a custom JavaFX application","Syncs scanned values to WAMP local server with MySQL","Uses serial communication to transmit information between Arduino Uno and laptop"],analysis:[{title:"JavaFX",text:"For this project, I really wanted to work with Java 8 to create a desktop application executable on any laptop. I was able to use standard Java for all of the backend connections to the Arduino and to the MySQL server, but, continuing the theme of building the entire app with Java, I also wanted to design the UI with Java also. To do this, I used JavaFX with SceneBuilder to create custom XML based layouts. This was a simple way to create a basic user experience for my small application."},{title:"Serial Connection",text:"One of the largest parts of this project was actually communicating through the serial port. As the Arduino's primary medium of communication, I had to some research into how to request access to a serial port, how to check for a specific device, how to listen for data, and a variety of other smaller problems that made up this overall challenge. Another aspect of this portion of the project was security. I didn't want to send identification numbers in plain text over the serial, so I did some bit shifting to at least scramble the numbers a little bit. In the future, these numbers would need to be encrypted and decrypted."},{title:"WAMP MySQL Server",text:"Since this was a DIY application, I choose to use WAMP to make a very simple local server that I could test on. I was able to use Java to write data to and read data from the MySQL Server, which was a pretty useful for a registry. I also implemented methods to clear the data and export the data to an Excel sheet for future use."}],improve:[{title:"Improvements",text:"As mentioned previously, there are a few things that I would change about this project. To begin with, I would encrypt the data from both the serial and the server. I would not want 'shifted' identification values being transmitted in plain text. Secondly, I would like to create an interface on the Arduino so that the user, who is swiping the NFC tag can recieve feedback aside from the application. Finally, I would enhance the graphics by not using JavaFX but rather something more aesthetically pleasing."},{title:"Lessons Learned",text:"Through this project I learned a lot of little things. I learned about communicating with serial ports and serializing objects in Java. I wrote some SQL scripts to add/modify users and clear databases of information. I also got to enhance my knowledge of Java 8, especially streams and lambda expressions. Finally, I got to work with some opensource libraries for Excel exports and NFC communication."}]}},{id:6,title:"Infrared Communication",type:"Low-Level Software & Arduino",desc:"A project focused on creating a custom IR-band communication protocol and developing a transmission device.",icons:["code","rss"],img:["img/ir_com.jpg","img/ir_com2.jpg","img/ir_com3.jpg"],links:[],date:new Date("December 1, 2012"),content:{otext:"The goal behind this project was to create my own protocol for transmitting and deciphering infrared pulses, as well as building communication applications via the aforementioned protocol.",feats:["Custom protcol for communicating using infrared pulses (alphanumerically)","4 Different modes: Send, Recieve, Send-Sensor Data, Block Infrared","Arduino-based and custom library for including this protocol","Custom 3D printed housing"],analysis:[{title:"Software",text:"The most difficult aspect of this project was simply designing the protocol. I began by testing the different frequencies I could pulse infrared (IR) LED's at and how they were received through my IR sensor. After I had a good idea of the range and the thresholds required for a clear transmission, I used a map to link all the alphanumeric values to groups of pulses, which became the bulk of the protocol. I also added a few checks to crack down on packet loss and corruption. Alongside the main protocol, I also made 4 modes for communication. You can find information about each below."},{title:"Send",text:"This, along with receive, was the simplest application of the protocol. Essentially, I just used an LCD screen, PSP joystick, and a pushbutton to implement a Querty keyboard to send messages with. These messages were then parsed into pulses and sent over the IR band."},{title:"Receive",text:"Similar to send, this mode simply allowed users to listen to the IR receiver and decode messages that were being sent in. This mode was also useful as it was able to capture and reproduce IR signals. I tried it on some of the nearby TV remotes and was able to navigate the TV just as a normal remote would."},{title:"Send-Sensor Data",text:"One thing that I wanted to include, especially since I was using an Arduino, was a mode to send sensor data. So I added a mode where the user could attacha sensor (I choose to use a potentiometer for the proof of concept) to a designated pin, and the Arduino would send the data over the protocol to a receiving device."},{title:"Block IR",text:"This mode was one of my favorites, as I simply increased the frequency of the pulses to the point where devices would keep listening to my IR stream and not be able to decode regular signals. For example, I placed my device across from a TV box and continued to send IR signals. As a result, the remote was not able to send any signals to this box."}],improve:[{title:"Improvements",text:"One of the largest improvements that I could make would be expanding the protcol to ASCII values. This would allow for direct communication from a nearby computer via the serial port, which could then be sent over IR waves to another computer or device. I would also like to build smaller transmitters, without the added size of the Arduino Uno and housing."},{title:"Lessons Learned",text:"This project taught me a lot about communication protocol's and how to handle the various issues that occur when transmitting data over a distance. I also learned a lot about packaging libraries, especially some of the difficulties of transferring existing code into a library. Finally, I learned a little bit about soldering especially after shorting a few home-made shields."}]}},{id:7,title:"Parallel-Loaded LED Display",type:"Hardware",desc:"A hardware project focused on using a grid of 64 RGB LEDs controlled by only 3 digital I/O pins.",icons:["code","lightbulb-o"],img:[],links:[{title:"Video of the Display",link:"https://plus.google.com/photos/103762700398614477573/albums/6169649464557740017?authkey=COGbzqCq847YWw"}],date:new Date("May 1, 2014"),content:{otext:"This project uses 3 Arduino Uno GIO pins to power 64 RGB LED's by using shift registers and LED placement.",feats:["Individual LED control, both pixel location and color","Only requires 3 Arduino Uno pins by parallel loading shift registers","Completely soldered and mounted to a frame for a nice display"],analysis:[{title:"Hardware",text:"In order to accomplish this, I made a grid of LED's with each row and column having 8 LED's. Then for each row, I soldered all the red legs together, then the green, and finally the blue. For each column I soldered the groun legs to each other. Thus I had 8 rows each with 3 control wires (R-G-B) and 8 columns each containing a single ground cable. Finally, I connected one shift register to all the red control lines, one to the blue, one to the green, and finally one to each of the ground cables. Hooking these up in parallel, I was able to control the individual bits on each register and thus I could pinpoint the individual LED and color that I wanted."},{title:"Software",text:"For the software behind this project, I choose to use an Arduino Uno and the shift register core library. To control the LED's I used an array to map each LED to the values of the four shift registers. I also used a similar map and enumerations to choose the color of the LED. This enabled me to have full control over each LED and it's color."},{title:"Note on Processing Power",text:"One issue I had with this project occured when I tried to individually control too many pixels at once. My design did not account for the propagation delay between each register, and so controlling more than 40 LED's at a time could cause some lag. If I revist this project in the future, I would put more time into reviewing the datasheets and the limitations on my  microcontroller's processing speed."}],improve:[{title:"Improvements",text:"As mentioned above, I would start by using a slightly faster processor to gain full control of all of the LED individually. I would also work on making the display a little more  presentable. Currently there are wires all over and the LED's are placed on a cardboard mount."},{title:"Lessons Learned",text:"This project taught me a lot about the design process. I had to do a lot of planning to setup the array of RGB LED's, the shift register connections, and the software for controlling each individual LED's by color and position. My mistake regarding processing speed and propagation delay taught me a lot about taking into a variety of factors into the design and how to find and fix/mitigate existing design flaws."}]}},{id:8,title:"Web Portfolio",type:"AngularJS, CSS3, HTML5",desc:"This project talks a little bit about how this site was made and some improvements for the future.",icons:["html5","css3"],img:[],links:[],date:new Date("June 1, 2015"),content:{otext:"This project just focuses on the making of this site. I wanted to make a place for all my projects to be stored, while also advancing my web development skills.",feats:["Leverages front-end frameworks/libraries including AngularJS, Bootstrap, Bower, and Gulp for UI elements and efficient development","Uses custom AngularJS directives, services, controllers and filters for templating content and managing user experience","Applied animations through the ng-animate library, routing with the ui-router library, and some components with angular ui-bootstrap library"],analysis:[{title:"AngularJS",text:"One of the more important aspects of this project was using AngularJS for all of the logic and modeling behind the website.Using angular I was able to make Factories/Services for the main content of the site, custom directives for displaying the various projects, and, one of my favorite features, dependency injection for integrating the application with different libraries. Angular was also extremely useful in filtering and uniquely displaying individual pieces of content; it really provided a great outline for the entire application."},{title:"Package Management/Creation",text:"Aside from things I have done through my internships, this was my first experience working with Gulp and Bower for package management. I mainly used Gulp for concatenating and 'uglifying' my javascript/css. I also used gulp to create a production-ready version of my development environment, by running tasks to minfiy content, replace links with production paths, and packaging it all into a folder. On the otherhand, Bower was incredibly useful for quickly downloading and working with different packages during development."}],improve:[{title:"Improvements",text:"For this project, I spent a lot of time in designing the UI and the overall application flow, and I kind of neglected writing unit tests.In the future, it would be very beneficial to write up some unit tests with Karma and Jasmine to simply check over all the JS behind this page. I would alsolike to include some web components in the future as a way to familiarize myself with them. A big improvement I would make is using a database to hold my content. Currently, I just use JS to populate the content, however in the future, an API call would be so mmuch better. Finally, I will probably make some UI changes in the future, perhapsin the next release I'll make a single page scrolling application."},{title:"Lessons Learned",text:"Through making this site, I learned a lot about web development as a whole. To begin with, I got to refine my skills in HTML5, CSS3, and AngularJS inorder to provide the content and UI that I wanted. As well as this, I got to learn a lot about proper ways to use Angular controllers and services. I also got toexpand my knowledge of popular front end programs and libraries including: bootstrap, gulp, and angular ui-router. "}]}},{id:9,title:"Arduino Robot",type:"Hardware/Low-Level Software",desc:"JARVIS - the 3-d printed humanoid robot prototype powered by inMoov and myRobotLab.",icons:["gears","code"],img:["img/jarvis.jpg"],links:[{title:"Stratasys Blog",link:"http://blog.stratasys.com/2014/06/05/jarvis-3d-printed-robot/"},{title:"InMoov",link:"http://www.inmoov.fr/"},{title:"MyRobotLab",link:"http://myrobotlab.org/"}],date:new Date("March 1, 2013"),content:{otext:"This was a group project that focused on developing a humanoid robot using a 3D printer, a few Arduino Uno's, some servo motors, and a whole lot of open source.",feats:["Integration between the MyRobotLab framework, 23 onboard Arduino's and a PS3 eye","Custom movement and response routines written in C and Java","Leveraged Google Speech API's for enhanced user interaction","Full 3D printed upper body"],analysis:[{title:"Structure",text:"For this project we choose to have one centralized application, written in Java, that would send instructions to individual Arduino Uno's. Each Arduino was in turn tied to 11 or 12 servo motors which controlled the robot's joint movements. Each Arduino had a custom script to decode and execute instructions, compressed by the main application. The main application also housed the code for Google Speech API's, facial recognition, and the various routines the robot could perform."},{title:"Software",text:"Using the open source software through MyRobotLab, provided our team with an API that was chock-full of functionality. Not only did it provide a base for making connections with the individual Arduino's, but it also provided tools to help integrate the application with different libraries. This was crucial for adding speech and facial recognition, two of the most important aspects of the project. In order to program the routines, we made array's that contained the desired angle of each servo; we then serialized this information and sent it to the Arduino Uno's for processing."},{title:"Hardware",text:"The hardware behind this project was really unique. We used some designs created by InMoov as a blueprint for constructing ours.In the process we got to see how the designers extracted potentiometers from servo motors so the angle of the arm was used as the target not simply the number of internal rotations.We also faced a great deal of issues keeping everything connected, so I made soldered some shields to connect the Arduino's to the servo motor's directly."}],improve:[{title:"Improvements",text:"This project was actually passed down to another group of students after I was finished with it and they have done some really neat things with it. I did have a few ideas for improvement before I left. The first improvement would be migrating the control framework from a laptop with a MyRobotLab application running on Windows to a custom made  application running on a light Linux kernel on a beagle board or other suitable microcontroller. I would also like to connect the robot via a LAN so it could be controlled by a nearby computer. "},{title:"Lessons Learned",text:"This project taught me a lot about reading and implementing methods to use API's. I had never used MyRobotLab before starting this project, so in order to use the built-in functionality I had to use the provided API. I also learned a lot about how important communication is within a team, especially when team members are focused solely onone aspect of the project. In our case, we needed more communication between those working on hardware, and those working on software."}]}}];return{getAllProjects:e,getProject:t,maxPID:o,getBlankProject:a}}])}(),function(){angular.module("mitchApp").factory("skillsFactory",[function(){function e(){return n}function t(){var e=[];return angular.forEach(n,function(t){"web"==t.type&&e.push(t)}),e}function o(){var e=[];return angular.forEach(n,function(t){"prgm"==t.type&&e.push(t);

}),e}function a(){var e=[];return angular.forEach(n,function(t){"app"==t.type&&e.push(t)}),e}function i(){var e=[];return angular.forEach(n,function(t){"hard"==t.type&&e.push(t)}),e}var n=[{name:"Android",type:"app",img:"img/android.jpg"},{name:"Altera FPGA",type:"hard",img:"img/altera-cyclone-fpga.png"},{name:"AngularJS",type:"web",img:"img/angular.png"},{name:"Arduino",type:"hard",img:"img/arduino.png"},{name:"Bootstrap 3",type:"web",img:"img/bootstrap3.png"},{name:"Java (3+ yrs)",type:"prgm",img:"img/java.png"},{name:"C (2+ years)",type:"prgm",img:"img/c.png"},{name:"Cordova",type:"app",img:"img/cordova.png"},{name:"CSS/LESS",type:"web",img:"img/css3.svg"},{name:"HTML 5",type:"web",img:"img/html.png"},{name:"Jasmine",type:"web",img:"img/jasmine.svg"},{name:"JQuery",type:"web",img:"img/jquery-logo.jpg"},{name:"Mbed",type:"hard",img:"img/mbed-logo.png"},{name:"NodeJS",type:"web",img:"img/nodejs.png"},{name:"Python (6+ months)",type:"prgm",img:"img/python.png"},{name:"Rasberry Pi",type:"hard",img:"img/raspi.png"},{name:"Matlab (2+ years)",type:"prgm",img:"img/matlab.png"},{name:"Grunt",type:"web",img:"img/grunt.svg"},{name:"Karma",type:"web",img:"img/karma.png"},{name:"Protractor",type:"web",img:"img/protractor.png"},{name:"Gulp",type:"web",img:"img/gulp.png"}];return{getSkills:e,getWebSkills:t,getPrgmSkills:o,getAppSkills:a,getHardSkills:i}}])}(),function(){angular.module("mitchApp").factory("coursesFactory",[function(){function e(){return t}var t=[{title:"CS 2340",desc:"Course focused on SOLID design principles and Java/Android programming. Also allowed students to implement design principles through Android application.",favorite:!0},{title:"CS 1332",desc:"Course focused on implementing data structures and other algorithms in Java. Some structures we covered include: Linked Lists, Queues, Stacks, Hash Maps, Skip Lists, and Trees ",favorite:!0},{title:"CS 1331",desc:"Course focused on a basic introduction to Java especially regarding syntax, general OO behavior, Java 8 lambdas and coding style.",favorite:!1},{title:"CS 1371",desc:"Course focused on MatLab Programming especially regarding File I/O, data analysis, graphing, and building data sets.",favorite:!1},{title:"ECE 2035",desc:"Course focused on C Programming and MIPS Assembly. Discussed concepts including basic C (pointers, function definitions), hash tables, stack, heap, instruction set architecture (ISA) and more.",favorite:!0},{title:"ECE 2031",desc:"Course focused on VHDL and FPGA programming with various projects varying from state machines and K-maps to custom Assembly logic for a small robot.",favorite:!1},{title:"ECE 2026",desc:"Course focused on theory and application of Digital Signal Processing, concepts included: Fourier Transforms, Phasor Representation, and using MatLab for signal analysis.",favorite:!0}];return{getCourses:e}}])}(),function(){angular.module("mitchApp").factory("leadershipFactory",[function(){function e(){return t}var t=[{title:"ECE 2035",position:"Teaching Assistant",bullets:["Worked with students to help them understand concepts in C and MIPS Assembly programming. Including memory, pointers, heaps, stacks, and hash maps","Helped students develop PacMan-esque implementation for the MBED microcontroller","Proctored tests and graded assignments for professor"]},{title:"Interfraternity Council (IFC)",position:"VP of Communications",bullets:["Controlled all external content from the GT IFC including our website (running Drupal) and social media feeds","Hosted and organized bi-weekly meetings for the 30 presidents and representatives that make up the council"]},{title:"Student Center Expansion Committee (SCEC)",position:"Member",bullets:["Served as a liaison for IFC and represented the interests of the Greek Student Body on this panel","Held town halls, surveyed students, and worked with various campus organizations to gauge the student body and faculty's interests in improving our existing student center"]},{title:"Student Government Association",position:"IT Committee Member",bullets:["Worked on IT projects including upgrading and rebuilding GT's Drupal pages and content","Helped write d3.js analytics for tobacco survey, which was then sent out to the entire student body"]}];return{getLeadership:e}}])}(),function(){angular.module("mitchApp").factory("interestFactory",[function(){function e(){return t}var t=[{title:"Big Data",subtitle:"Using lots of data to draw unique conclusions",type:"tech"},{title:"AI",subtitle:"A little scary, but neural networks and similar algorithms are very interesting",type:"tech"},{title:"Web Development",subtitle:"A lot of cool things here: Angular 2.0, TypeScript, WebComponents!",type:"tech"},{title:"Embedded Systems",subtitle:"Gadgets and Devices? Count Me In!",type:"tech"},{title:"Generally Cool Projects",subtitle:"Space, Renewable Energy, anything!",type:"tech"},{title:"Soccer",subtitle:"Manchester City fan",type:""},{title:"Running",subtitle:"Not so much for speed anymore...",type:""},{title:"Music",subtitle:"Alternative and Classic Rock",type:""},{title:"Graphic Design",subtitle:"Flat Design, Material Design, Adobe Creative Suite",type:""},{title:"Misc",subtitle:"Ping Pong, Pool, Cards, Rock Climbing",type:""}];return{getInterests:e}}])}(),function(){angular.module("mitchApp").controller("proCtrl",["$scope","projectFactory",function(e,t){e.projects=t.getAllProjects(),e.grid=!0,e.projectFilter=function(e){return function(t){return void 0===e||""===e?!0:t.title.toLowerCase().match(e.toLowerCase())?!0:t.type.toLowerCase().match(e.toLowerCase())?!0:t.desc.toLowerCase().match(e.toLowerCase())?!0:!1}}}])}(),function(){angular.module("mitchApp").controller("projectDetCtrl",["$scope","$stateParams","$modal","projectFactory",function(e,t,o,a){var i=t.projectID,n=a.maxPID();n>=i&&i>=0?(e.project=a.getProject(i),e.template=e.project.content,e.valid=!0):(e.project=a.getBlankProject(),e.template=e.project.content,e.valid=!1),e.open=function(t,a){e["package"]={title:t,img:a};o.open({animation:!1,templateUrl:"views/modal_template.html",controller:"modalCtrl",size:"lg",resolve:{"package":function(){return e["package"]}}})}}])}(),function(){angular.module("mitchApp").controller("modalCtrl",["$scope","$modalInstance","package",function(e,t,o){e.title=o.title,e.img=o.img,e.done=function(){t.dismiss("done viewing")}}])}(),function(){angular.module("mitchApp").controller("aboutCtrl",["$scope","$http","skillsFactory","coursesFactory","leadershipFactory","interestFactory",function(e,t,o,a,i,n){e.prgm=o.getPrgmSkills(),e.web=o.getWebSkills(),e.app=o.getAppSkills(),e.hard=o.getHardSkills(),e.courses=a.getCourses(),e.leaders=i.getLeadership(),e.interests=n.getInterests()}])}(),function(){angular.module("mitchApp").directive("projectDirective",function(){return{restrict:"E",scope:{project:"=pro"},templateUrl:"views/project_template.html"}})}(),function(){angular.module("mitchApp").directive("projectDirlist",function(){return{restrict:"E",scope:{project:"=pro"},templateUrl:"views/project_template_list.html"}})}(),function(){angular.module("mitchApp").directive("courseDirective",function(){return{restrict:"E",scope:{course:"=crs"},templateUrl:"views/course_template.html"}})}(),function(){angular.module("mitchApp").directive("leadershipDirective",function(){return{restrict:"E",scope:{leader:"=lead"},templateUrl:"views/leadership_template.html"}})}();